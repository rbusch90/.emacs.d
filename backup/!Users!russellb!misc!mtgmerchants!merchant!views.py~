from django.contrib.auth import authenticate
from django.contrib.auth import logout as logout_user
from django.contrib.auth import login as login_user
from django.core.validators import validate_email
from django.contrib.auth.models import User
from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect,HttpResponse
from django.template import RequestContext
import datetime
from merchant.models import Merchant,Cart,InventoryCard,PurchaseCard

MERCHANT_ROOT_URL = "/merchant/"
invalid_merchant_message = "ERROR: You need to be logged in with a merchant account to use this feature."

#############
### PAGES ###
#############

def front_page(request):
    merchant = validate_merchant(request)
    if merchant:
        return HttpResponseRedirect("/merchant/%s/" % (merchant.acct))
    return render_to_response('merchant/merchant_frame.html',
                              {
                                  'merchant' : merchant,
                                  'page' : "merchant/mission.html",
                                  
                               },
                              context_instance=RequestContext(request))

def inventory_system(request,merchant_name):
    merchant = validate_merchant(request)
    if merchant is None or merchant.acct.username != merchant_name:
        print merchant
        return HttpResponseRedirect(MERCHANT_ROOT_URL)
    return render_to_response('merchant/merchant_frame.html',
                              {
                                  'merchant' : merchant,
                                  'page' : "merchant/main.html",
                                  
                               },
                              context_instance=RequestContext(request))

def search_results(request,merchant_name):
    merchant = validate_merchant(request)
    if merchant is None or merchant.acct.username != merchant_name:
        return HttpResponseRedirect(MERCHANT_ROOT_URL)
    try:
        customer_list = request.GET.get("customer-list")
        cards = customer_list.split("\n")
        print cards
        distinct_list = []
        for name in cards:
            results = InventoryCard.objects.filter(card__name__iexact=name.replace("\r",""))
            if len(results) > 0:
                distinct_list.append(results[0])
        return render_to_response('merchant/merchant_frame.html',
                                  {
                                      'merchant' : merchant,
                                      'page' : 'merchant/card_list.html',
                                      'card_list' : distinct_list,
                                  },
                                  context_instance=RequestContext(request))

    except Exception,e:
        print e

    try:
        name = request.GET.get('search-name')
        card_list = InventoryCard.objects.filter(card__name__icontains=name)
        distinct_list = []
        for card in card_list:
            if not (card.get_name() in [c.get_name() for c in distinct_list]):
                distinct_list.append(card)

        return render_to_response('merchant/merchant_frame.html',
                                  {
                                      'merchant' : merchant,
                                      'page' : 'merchant/card_list.html',
                                      'card_list' : distinct_list,
                                  },
                                  context_instance=RequestContext(request))

    except Exception,e:
        return HttpResponse(e)

###############
### ACTIONS ###
###############

def clear_sale(request):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse("ERROR: You need to be logged in to do this.")

    for card in merchant.current_cart.get_cards():
        card.delete()
    return HttpResponse("success")

def cash_out(request,cart_pk=None):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse("ERROR: You need to be logged in to do this.")

    if cart_pk:
        cart = Cart.objects.get(pk=cart_pk)
    else:
        cart = merchant.current_cart
    for card in cart.get_cards():
        merchant.reduce_inventory(
            card.get_name(),card.get_set(),card.condition,card.get_count())
        card.delete()

    return HttpResponse("success")

def add_to_sale(request,cart_pk=None):
    merchant = validate_merchant(request)
    if merchant is None:
       return HttpResponseRedirect("/")
    
    try:
        name = request.POST['name']
        expansion = request.POST['expansion']
        count = request.POST['count']
        condition = request.POST['condition']
        inventory_card = InventoryCard.objects.get(card__name=name,card__expansion=expansion)
        added = merchant.add_to_sale(inventory_card,int(count),condition)
        if added is True:
            return HttpResponse("success")
        else:
            return HttpResponse("ERROR: %s" % (added))

    except Exception,e:
        return HttpResponse(e)
        #return HttpResponse("ERROR: Something went wrong.  That's all we know.")

def remove_from_sale(request,card_pk):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse(invalid_merchant_message)
    card = PurchaseCard.objects.get(pk=card_pk)
    card.delete()
    return HttpResponse("successfuly removed card")

def add_to_inventory(request):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse(invalid_merchant_message)

    try:
        name = request.POST['name']
        expansion = request.POST['expansion']
        count = request.POST['count']
        condition = request.POST['condition']
        inventory_card = InventoryCard.objects.get(card__name=name,card__expansion=expansion)
        if condition == "NM/M":
            inventory_card.nm_count += count
        elif condition == "SP":
            inventory_card.sp_count += count
        elif condition == "MP":
            inventory_card.mp_count += count
        inventory_card.save()
    except Exception:
        return HttpResponse("ERROR: Something went wrong.  That's all we know.")

def remove_from_inventory(request):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse(invalid_merchant_message)

    try:
        name = request.POST['name']
        expansion = request.POST['expansion']
        count = request.POST['count']
        condition = request.POST['condition']
        inventory_card = InventoryCard.objects.get(card__name=name,card__expansion=expansion)
        if condition == "NM/M":
            inventory_card.nm_count -= count
        elif condition == "SP":
            inventory_card.sp_count -= count
        elif condition == "MP":
            inventory_card.mp_count -= count
        inventory_card.save()

    except Exception:
        return HttpResponse("ERROR: Something went wrong.  That's all we know.")

###############
### WIDGETS ###
###############

def current_sale(request):
    merchant = validate_merchant(request)
    if merchant is None:
        return HttpResponse(invalid_merchant_message)

    return render_to_response('merchant/widgets/current_cart.html',
                              {
                               'merchant' : merchant,
                               },
                              context_instance=RequestContext(request))

########################
### HELPER FUNCTIONS ###
########################

def validate_merchant(request):
    try:
        c_user = Merchant.objects.get(acct__username=request.user.username)
        c_user.acct.last_login = datetime.datetime.now()
        c_user.acct.save()
        return c_user

    except Exception:
        return None
