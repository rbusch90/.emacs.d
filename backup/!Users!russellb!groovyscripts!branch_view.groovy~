/*

These 3 variables need to be passed to the script:

COMPONENT_NAME = ${env.JOB_NAME}
RELEASE_VERSION = ${env.RELEASE_VERSION}
CVS_TAG = ${env.CVS_TAG} V10_0_0_13

*/
import hudson.model.Hudson;
import hudson.model.ListView;
import hudson.scm.CvsRepositoryLocation.TagRepositoryLocation;
import hudson.plugins.copyartifact.CopyArtifact;
import hudson.plugins.copyandunarchive.CopyAndUnarchiveArtifact;
import hudson.triggers.SCMTrigger;
import hudson.triggers.TimerTrigger;
import com.tikal.jenkins.plugins.multijob.MultiJobBuilder;

def branch_view(component_name,release_version,cvs_tag){

    dev_view = Hudson.instance.getView("Mathematica").getView("Development").getView(
    	      "Component").getView(component_name);

    target_view = Hudson.instance.getView("Mathematica").getView("Release").getView(
	    release_version).getView("Components");
    new_view = null;

    if (target_view.getView(component_name) != null){
        for(job in target_view.getView(component_name).getItems()){
          if (job.isDisabled()) job.enable();
        }
        println("View already exists in Release for " + component_name + ".  Skipping Component Branch.");
    }
    else {
    	new_view = new ListView(component_name,target_view);
    	target_view.addView(new_view);

        for(job in dev_view.getItems()){
	    if(job.name.startsWith("Web.")) continue;
            new_job = Hudson.instance.copy(job,job.name + "." + release_version);
            new_job.displayName = job.displayName + " - " + release_version;
            new_job.save();
            new_view.doAddJobToView(new_job.name);
            new_view.save();

	    // Make Release Branch changes to job configurations
            cvs_obj = new_job.getScm();
            for(repo in cvs_obj.getRepositories()){
                for(repoItem in repo.getRepositoryItems()){
	            repoItem.location = new TagRepositoryLocation(cvs_tag,true);
	        }
            }

	    for(buildstep in new_job.getBuilders()){
	        //Update jobs to use artifacts from release builds
	        if(buildstep.getClass() == CopyArtifact || buildstep.getClass() == CopyAndUnarchiveArtifact){
		    if (buildstep.project.equals("MathLink.MacOSX-x86-64.clang.10.0")){
		        buildstep.project = buildstep.project.replace(".clang","");
		    }
		    else if (buildstep.project.equals("MathLink.MacOSX-x86-64.llvm.10.0"){
		        buildstep.project = buildstep.project.replace(".llvm","");
		    }
		    new_reference = buildstep.project + "." + release_version;
		    if (Hudson.instance.getItems().find{ it.name == new_reference } != null){
		        buildstep.project = new_reference;
		    }
	        }

	        // Update Polling jobs to reference release jobs
	        if(buildstep.getClass() == MultiJobBuilder){
	            for(phaseJob in buildstep.phaseJobs){
		        phaseJob.setJobName(phaseJob.getJobName() + "." + release_version);
		    }
	        }
	    }

	    // Remove SCM polling in favor of nightly builds (Jenkins doesn't poll CVS tags properly)
	    for(trigger in new_job.getTriggers()){
	        if (trigger.getValue().getClass() == SCMTrigger){
                    new_job.removeTrigger(trigger.getValue().getDescriptor());
        	    new_job.addTrigger(new TimerTrigger("H 18 * * *"));
    	        }
	    }

	    new_job.save();
	    new_job.scheduleBuild();
        }
	println("Successfully branched " + component_name + " for release " + release_version + ".");
    }
}

component_list = COMPONENT_NAME.split();
for (component_name in component_list){
    try{
        branch_view(component_name,RELEASE_VERSION,CVS_TAG);
    }
    catch (e){
        println("An error occurred attempting to create branched view for " + component_name + ".");
	println(e);
    }
}