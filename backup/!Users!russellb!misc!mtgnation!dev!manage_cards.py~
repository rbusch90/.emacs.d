import sys
import datetime
from os import listdir
import random
import math
import codecs

import lxml
from lxml import etree
from oracle.models import Card

from dev.setlist import full_setlist

attribs = {
"name":0,
"set":1,
"color":2,
"manacost":3,
"type":4,
"pt":5,
"tablerow":6,
"text":7,
}

def get_attrib(elem,tag):
    return elem[attribs[tag]].text

def updated_add_cards():
    carddoc = etree.parse(file("dev/cardlist.txt"))
    root = carddoc.getroot()
    card1 = root[0]
    print get_attrib(card1,"name")
    print get_attrib(card1,"color")

updated_add_cards()

def add_cards(specified_set=None):
    # Change this filename if you need to read from a differnt file
    linestring = open('dev/setlist.txt', 'r').read()

    set_xml = linestring.split('</set>')
    set_xml.pop(-1)

    for f in set_xml:
        root = lxml.etree.fromstring(f + '</set>')
        set_name = root.xpath('//name/text()')
        long_name = root.xpath('//longname/text()')
        set_list.append([set_name, long_name])

    # Change this filename if you need to read from a differnt file
    linestring = open('dev/cardlist.txt', 'r').read()


    card_xml = linestring.split('</card>')
    card_xml.pop(-1)
    
    for f in card_xml:
        root = lxml.etree.fromstring(f + '</card>')
        name = root.xpath('//name/text()')
        sets = root.xpath('//set/text()')
        colors = root.xpath('//color/text()')
        cost = root.xpath('//manacost/text()')
        card_type = root.xpath('//type/text()')
        p_t = root.xpath('//pt/text()')
        text = root.xpath('//text/text()')
        url = root.xpath('//set/@picURL')
        url_index = 0

        for s in sets:
            for x in set_list:
                if s == "".join(x[0]):
                    set_name = "".join(x[1])
            if specified_set == None or specified_set == s:
                card_list.append([name, s, set_name, colors, cost, card_type, p_t, text, url[url_index]])
            url_index += 1

        failed_name = ""
    for card in card_list:
        try:
            name = unicode(card[0][0])
            failed_name = name
            s = card[1]
            expansion = card[2]
            
            colors = ""
            for color in card[3]:
                colors += color
                
            mana = ""
            for m in card[4]:
                mana+= m

            card_type = ""
            for t in card[5]:
                card_type += t

            if len(card[6]) > 0:
                power = card[6][0][0:card[6][0].find("/")]
                toughness= card[6][0][card[6][0].find("/")+1:]
            else:
                power = None
                toughness = None
        
            text = ""
            for e in card[7]:
                text += e

            img = card[8]

            # TODO: add p_t and img_url to Models
            new_card = Card(name=name,image_url=img,expansion=expansion,
                            rules_text=text,power=power,toughness=toughness,
                            mana_cost=mana,card_type=card_type,colors=colors)

            #matches = Card.objects.filter(name=new_card.name,
            #                              expansion=new_card.expansion)
            #if len(matches) == 0:
            #    new_card.save()
            new_card.save()

        except Exception, e:
            print e
            print failed_name
