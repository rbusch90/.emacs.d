/*

These 2 variables need to be passed to the script:

COMPONENT_NAME = ${env.JOB_NAME}
RELEASE_VERSION = ${env.RELEASE_VERSION}

*/
import hudson.model.Hudson;

def replace_component_job(component_name,release_version){

    layout_views = Hudson.getInstance().getView("Mathematica").getView("Release").getView(
	    release_version).getView("Layout").getViews();

    for(layout_view in layout_views){
        for (job in layout_view.getItems()){
	    if (job.name.contains(component_name) && !job.name.endsWith(release_version)){
	        new_job = Hudson.instance.getItems().find{ it.name == (job.name + "." + release_version) }
		if (new_job != null && !new_job.isDisabled()){
		    layout_view.doAddJobToView(new_job.name);
		    layout_view.doRemoveJobFromView(job.name);
		    layout_view.save();
		}
	    }
	}
    }
    println("Successfully updated Release Layouts to reference " + component_name + "." + release_version + " jobs.");
}

component_list = COMPONENT_NAME.split();
for (component_name in component_list){
    try{
        replace_component_job(component_name,RELEASE_VERSION);
    }
    catch (e){
        println("An error occurred attempting to update a Layout view.");
	println(e);
    }
}